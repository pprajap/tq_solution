# This is a basic workflow to help you get started with Actions

name: CI/CI Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          recursive: true

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, terra quantum!

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push tq-backend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/tq-backend:latest -f tq_backend/Dockerfile ./tq_backend
          docker push ${{ secrets.DOCKER_USERNAME }}/tq-backend:latest

      - name: Build and push tq-frontend-desktop image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/tq-frontend-desktop:latest -f tq_frontend/qtdeskDockerfile ./tq_frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/tq-frontend-desktop:latest

      - name: Build and push tq-frontend-web-light image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/tq-frontend-web-light:latest -f tq_frontend/qtwasm_multistage_Dockerfile ./tq_frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/tq-frontend-web-light:latest

  deploy:
    # needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          recursive: true

      # Configure Workload Identity Federation and generate an access token.
      #
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Get the GKE credentials so we can deploy to the cluster
      - name: 'Set up GKE credentials'
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: '${{ secrets.GKE_CLUSTER_NAME }}'
          location: '${{ secrets.GKE_CLUSTER_ZONE }}'

      # verify the connection to the cluster BEFORE DEPLOYMENT
      - name: 'Verify cluster services BEFORE DEPLOYMENT'
        run: |
          kubectl get services
          kubectl get deployments
          kubectl get pods

      # Update the Kubernetes deployments with the new images
      - name: Update Kubernetes deployments
        run: |
          kubectl set image deployment/tq-backend tq-backend=${{ secrets.DOCKER_USERNAME }}/tq-backend:latest
          kubectl set image deployment/tq-frontend-web tq-frontend-web=${{ secrets.DOCKER_USERNAME }}/tq-frontend-web-light:latest

      # verify the connection to the cluster AFTER DEPLOYMENT
      - name: 'Verify cluster services AFTER DEPLOYMENT'
        run: |
          kubectl get services
          kubectl get deployments
          kubectl get pods
